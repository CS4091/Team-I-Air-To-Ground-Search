@page "/GenerateGrid"
@using System.Diagnostics
@rendermode InteractiveServer

<PageTitle>Air-to-Ground Grid Generator</PageTitle>

<h1>Air-to-Ground Grid Generator</h1>
<p>
    This page generates a grid world for the air-to-ground search problem. NOTE: If you would like to use a generated grid, make sure the imported grid on the "Run Algorithm" page is cleared first.
</p>


<div class="row">
    @* Left Column *@
    <div class="col-md-6">
        @if(gridWasGenerated)
        {
            <div class="d-flex justify-content-between align-items-center">
                <h3>Current Grid</h3>
            </div>
                <img src="@imageSource" alt="Grid World" />
                @if (gridWasGenerated)
                    {
                        <button class="btn btn-primary" @onclick="deleteGeneratedGrid">Clear Grid</button>
                    }
        }
    </div>

    @* Right Column *@
    <div class="col-md-6">
        <h3>Generate a new grid?</h3>
        <p>Click the button below to generate a new grid.</p>
        <p>Enter the number of rows and columns for the grid world. The default is 100x100.</p>

        <p style="margin-bottom: .2rem">Rows:</p>
        <input type="text" class="form-control" placeholder="" @bind="gridRows" />
        <p style="margin-bottom: .2rem">Columns:</p>
        <input type="text" class="form-control" style="margin-bottom: 1rem" placeholder="Enter grid columns (e.g., 100)" @bind="gridCols" />
        <div class="btn-group" role="group">
            <button class="btn btn-primary" @onclick="runPythonScript">Generate Grid</button>
            @if (gridWasGenerated)
            {
                <a class="btn btn-secondary" href="@imageSource" download="grid_world.png">Download Grid PNG</a>
                <a class="btn btn-secondary" href="@csvSource" download="grid_world.csv">Download Grid CSV</a>
                <a class="btn btn-secondary" href="@jsonSource" download="grid_world_params.json">Download Grid JSON</a>
                <a class="btn btn-secondary" href="@txtSource" download="grid_world.txt">Download Grid TXT</a>
            }
        </div>
        <p></p>
        @if (File.Exists("./wwwroot/outputs/GeneratedGrid/grid_world.txt"))
        {
            <p role="status">Output:</p>
            <ul>
                @if (gridResultLines != null)
                {
                    @foreach (var line in gridResultLines)
                    {
                        <li>@line</li>
                    }
                }
            </ul>
        }
    </div>
</div>

@code {
    private List<string>? gridResultLines;
    private string? imageSource = $"outputs/GeneratedGrid/grid_world.png?{Guid.NewGuid()}";
    private string? csvSource = $"outputs/GeneratedGrid/grid_world.csv?{Guid.NewGuid()}";
    private string? jsonSource = $"outputs/GeneratedGrid/grid_world_params.json?{Guid.NewGuid()}";
    private string? txtSource = $"outputs/GeneratedGrid/grid_world.txt?{Guid.NewGuid()}";
    private bool gridWasGenerated = File.Exists("./wwwroot/outputs/GeneratedGrid/grid_world.png");
    private int gridRows = 100;
    private int gridCols = 100;

    protected override Task OnInitializedAsync()
    {
        if(File.Exists("./wwwroot/outputs/GeneratedGrid/grid_world.txt"))
        {
            gridResultLines = File.ReadAllText("./wwwroot/outputs/GeneratedGrid/grid_world.txt").Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).ToList();
        }
        return Task.CompletedTask;
    }
    private void runPythonScript()
    {
        // Create a new process
        var psi = new ProcessStartInfo
        {
            FileName = "python",
            Arguments = "src/external/grid_world_search_generator.py " + gridRows + " " + gridCols,
            RedirectStandardOutput = false, // No need to redirect standard output
            UseShellExecute = false,
            CreateNoWindow = true
        };
        // Start the process
        using (var process = Process.Start(psi))
        {
            process?.WaitForExit(); // Wait for the process to exit
        }

        // Read the output from the txt file
        string txtFilePath = "./wwwroot/outputs/GeneratedGrid/grid_world.txt";
        if (File.Exists(txtFilePath))
        {
            string result = File.ReadAllText(txtFilePath);
            gridResultLines = result.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        gridWasGenerated = true;
        imageSource = $"outputs/GeneratedGrid/grid_world.png?{Guid.NewGuid()}";
        csvSource = $"outputs/GeneratedGrid/grid_world.csv?{Guid.NewGuid()}";
        jsonSource = $"outputs/GeneratedGrid/grid_world_params.json?{Guid.NewGuid()}";
        txtSource = $"outputs/GeneratedGrid/grid_world.txt?{Guid.NewGuid()}";
    }

    private void deleteGeneratedGrid()
    {
        // Delete the generated grid
        if (imageSource != null && csvSource != null && jsonSource != null && txtSource != null)
        {
            // Delete all files in the GeneratedGrid directory
            var generatedGridFiles = Directory.GetFiles("wwwroot/outputs/GeneratedGrid");
            foreach (var file in generatedGridFiles)
            {
                @if(!file.Contains(".gitignore"))
                {
                    File.Delete(file);
                }
            }
            gridWasGenerated = false;
            imageSource = null;
            csvSource = null;
            jsonSource = null;
            gridWasGenerated = false;
            gridResultLines = null;
        }
    }
}