@page "/GenerateGrid"
@using System.Diagnostics
@rendermode InteractiveServer

<PageTitle>Air-to-Ground Grid Generator</PageTitle>

<h1>Air-to-Ground Grid Generator</h1>
<p>
    This page generates a grid world for the air-to-ground search problem. NOTE: If you would like to use a generated grid, make sure the imported grid on the "Run Algorithm" page is cleared first.
</p>


<div class="row">
    @* Left Column *@
    <div class="col-md-6">
        @if(gridWasGenerated)
        {
            <div class="d-flex justify-content-between align-items-center">
                <h3>Current Grid</h3>
            </div>
                <img src="@imageSource" alt="Grid World" />
                @if (gridWasGenerated)
                    {
                        <button class="btn btn-primary" @onclick="deleteGeneratedGrid">Clear Grid</button>
                    }
        }
    </div>

    @* Right Column *@
    <div class="col-md-6">
        <h3>Generate a new grid?</h3>
        <p>Click the button below to generate a new grid.</p>
        <p>Enter the number of rows and columns for the grid world. The default is 100x100.</p>
        <p>Min grid size is 10x10 and max grid size is 2000x2000.</p>

        <p style="margin-bottom: .2rem">Rows:</p>
        <input type="number" class="form-control" placeholder="Enter grid rows (e.g., 100)" @bind="gridRows" @oninput="ValidateGridRows" min="10" max="2000" />
        <p style="margin-bottom: .2rem">Columns:</p>
        <input type="number" class="form-control" style="margin-bottom: 1rem" placeholder="Enter grid columns (e.g., 100)" @bind="gridCols" @oninput="ValidateGridCols" min="10" max="2000" />
        <div class="btn-group" role="group">
            <button class="btn btn-primary" @onclick="runPythonScript" disabled="@isGenerateButtonDisabled">Generate Grid</button>
            @if (gridWasGenerated)
            {
                <a class="btn btn-secondary" href="@gridZipFile" download="GeneratedGrid.zip">Download Grid Data</a>
            }
        </div>
        <p></p>
        @if (File.Exists("./wwwroot/outputs/GeneratedGrid/data/grid_world.txt"))
        {
            <p role="status">Output:</p>
            <ul>
                @if (gridResultLines != null)
                {
                    @foreach (var line in gridResultLines)
                    {
                        <li>@line</li>
                    }
                }
            </ul>
        }
    </div>
</div>

@code {
    private List<string>? gridResultLines;
    private string? imageSource = "";
    private string? csvSource = "";
    private string? jsonSource = "";
    private string? txtSource = "";
    private bool gridWasGenerated = File.Exists("./wwwroot/outputs/GeneratedGrid/data/grid_world.png");
    private int gridRows = 100;
    private int gridCols = 100;
    private bool isGenerateButtonDisabled = false;
    private string? gridZipFile = $"outputs/GeneratedGrid/grid_world.zip?{Guid.NewGuid()}";

    protected override Task OnInitializedAsync()
    {
        if(File.Exists("./wwwroot/outputs/GeneratedGrid/data/grid_world.png"))
        {
            gridResultLines = File.ReadAllText("./wwwroot/outputs/GeneratedGrid/data/grid_world.txt").Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).ToList();
            imageSource = $"outputs/GeneratedGrid/data/grid_world.png?{Guid.NewGuid()}";
            csvSource = $"outputs/GeneratedGrid/data/grid_world.csv?{Guid.NewGuid()}";
            jsonSource = $"outputs/GeneratedGrid/data/grid_world_params.json?{Guid.NewGuid()}";
            txtSource = $"outputs/GeneratedGrid/data/grid_world.txt?{Guid.NewGuid()}";
        }
        return Task.CompletedTask;
    }
    private void runPythonScript()
    {
        // Create a new process
        var psi = new ProcessStartInfo
        {
            FileName = "python",
            Arguments = "src/external/grid_world_search_generator.py " + gridRows + " " + gridCols,
            RedirectStandardOutput = false, // No need to redirect standard output
            UseShellExecute = false,
            CreateNoWindow = true
        };
        // Start the process
        using (var process = Process.Start(psi))
        {
            process?.WaitForExit(); // Wait for the process to exit
        }

        // Read the output from the txt file
        string txtFilePath = "./wwwroot/outputs/GeneratedGrid/data/grid_world.txt";
        if (File.Exists(txtFilePath))
        {
            string result = File.ReadAllText(txtFilePath);
            gridResultLines = result.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        gridWasGenerated = true;

        // Create a new folder to place the generated files
        string outputDirectory = "./wwwroot/outputs/GeneratedGrid/data";
        if (!Directory.Exists(outputDirectory))
        {
            Directory.CreateDirectory(outputDirectory);
        }
        // Move all generated files into the correct folder
        var generatedFiles = Directory.GetFiles("./wwwroot/outputs/GeneratedGrid", "*.*", SearchOption.TopDirectoryOnly);
        foreach (var file in generatedFiles)
        {
            var fileName = Path.GetFileName(file);
            if (fileName.Contains(".png") || fileName.Contains(".txt") || fileName.Contains(".csv") || fileName.Contains(".json"))
            {
                if(File.Exists($"./wwwroot/outputs/GeneratedGrid/data/{fileName}"))
                    {
                        File.Delete($"./wwwroot/outputs/GeneratedGrid/data/{fileName}");
                    }
                File.Move(file, Path.Combine(outputDirectory, fileName));
            }
        }

        // Create a zip file of the generated files
        string zipFilePath = "./wwwroot/outputs/GeneratedGrid/grid_world.zip";
        if (File.Exists(zipFilePath))
        {
            File.Delete(zipFilePath); // Delete the existing zip file if it exists
        }
        System.IO.Compression.ZipFile.CreateFromDirectory(outputDirectory, zipFilePath);
        gridZipFile = $"outputs/GeneratedGrid/grid_world.zip?{Guid.NewGuid()}";

        imageSource = $"outputs/GeneratedGrid/data/grid_world.png?{Guid.NewGuid()}";
        csvSource = $"outputs/GeneratedGrid/data/grid_world.csv?{Guid.NewGuid()}";
        jsonSource = $"outputs/GeneratedGrid/data/grid_world_params.json?{Guid.NewGuid()}";
        txtSource = $"outputs/GeneratedGrid/data/grid_world.txt?{Guid.NewGuid()}";
    }

    private void deleteGeneratedGrid()
    {
        // Delete the generated grid
        if (imageSource != null && csvSource != null && jsonSource != null && txtSource != null)
        {
            // Delete all files in the GeneratedGrid directory
            var generatedGridFiles = Directory.GetFiles("wwwroot/outputs/GeneratedGrid");
            foreach (var file in generatedGridFiles)
            {
                @if(!file.Contains(".gitignore"))
                {
                    File.Delete(file);
                }
            }
            // Delete the data file and directory
            Directory.Delete("wwwroot/outputs/GeneratedGrid/data", true);
            gridWasGenerated = false;
            imageSource = null;
            csvSource = null;
            jsonSource = null;
            gridWasGenerated = false;
            gridResultLines = null;
        }
    }

    private void ValidateGridRows(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            gridRows = Math.Clamp(value, 10, 2000); // Clamp value between 10 and 2000
        }
        else
        {
            gridRows = 10; // Default to minimum value if invalid
        }
        ValidateGenerateButton();
    }

    private void ValidateGridCols(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            gridCols = Math.Clamp(value, 10, 2000); // Clamp value between 10 and 2000
        }
        else
        {
            gridCols = 10; // Default to minimum value if invalid
        }
        ValidateGenerateButton();
    }

    private void ValidateGenerateButton()
    {
        isGenerateButtonDisabled = gridRows < 10 || gridRows > 2000 || gridCols < 10 || gridCols > 2000;
    }
}