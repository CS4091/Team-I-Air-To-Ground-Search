@page "/RunAlgorithm"
@using System.Diagnostics
@using System.IO.Compression
@rendermode InteractiveServer

<PageTitle>Air-to-Ground Pathing Algorithm Runner</PageTitle>

<h1>Air-to-Ground Pathing Algorithm Runner</h1>
<p>
    This page runs the pathing algorithm for the air-to-ground search problem. NOTE: Importing a grid deletes any previously imported grid.
</p>

@if (ImportedGrid is false && !gridWasGenerated)
{
    <h6>Either generate a grid using the generator tool or upload a grid to run the pathing algorithm on.</h6>
    <p></p>
}

<div class="row">
    @* Left Column *@
    <div class="col-md-6">
        @if(gridWasGenerated || ImportedGrid)
        {
            <div class="d-flex justify-content-between align-items-center">
                <h3>Current Grid</h3>
            </div>
            <p>
                <img src="@imageSource" alt="Grid World" />
            </p>
            @if (ImportedGrid)
            {
                <button class="btn btn-primary" @onclick="deleteImportedGrid">Clear Grid</button>
            }
        }
    </div>

    @* Right Column *@
    <div class="col-md-6">
        <h4>Import a new grid?</h4>
        <p>Upload a new Grid to run the pathing algorithm on. .zip file must contain a png, csv, and json of the grid.</p>
        @if (!clearFileInputs)
        {
            <div class="row">
                <div class="col-md-6 form-group">
                    <p>Upload grid:</p>
                    <InputFile OnChange="UploadGrid" accept=".zip" />
                    <p></p>
                </div>
            </div>
        }

        @if (ImportedGrid)
        {
            <p>Grid imported successfully!</p>
        }

        @if(gridWasGenerated || ImportedGrid)
        {
            <label for="algorithm">Select an algorithm:</label>
            <p></p>

            <div class="row" style="max-width: 800px;">
                <div class="col-md-4 form-group">
                    <select class="form-control" id="algorithm" @bind="algorithm">
                        <option value="backend.load_world">A*</option>
                        <option value="algorithms.d_search">Dijkstra</option>
                    </select>
                </div>
                <div class="col-md-3 form-group">
                    <button class="btn btn-primary" @onclick="ExecuteAlgorithm" disabled="@isRunning">Run Algorithm</button>
                </div>
            </div>
            @if (isRunning)
            {
                <p>Running...</p>
            }
        }
    </div>
</div>

@inject NavigationManager NavigationManager

@code {
    private List<string> gridResultLines = new List<string>();
    private bool clearFileInputs = false;
    private string? algorithm = "a_star";
    private bool ImportedGrid = false;
    private string fileName = "";
    private bool gridWasGenerated = File.Exists("./wwwroot/outputs/GeneratedGrid/data/grid_world.png");
    private string? imageSource;
    private bool isRunning = false;

    protected override Task OnInitializedAsync()
    {
        if (File.Exists("./wwwroot/outputs/ImportedGrid/grid_world.png") && File.Exists("./wwwroot/outputs/ImportedGrid/grid_world_params.json") && File.Exists("./wwwroot/outputs/ImportedGrid/grid_world.csv") && File.Exists("./wwwroot/outputs/ImportedGrid/grid_world.txt"))
        {
            ImportedGrid = true;
            gridWasGenerated = false;
            imageSource = $"outputs/ImportedGrid/grid_world.png?{Guid.NewGuid()}";
        }
        else if (File.Exists("./wwwroot/outputs/GeneratedGrid/data/grid_world.png"))
        {
            imageSource = $"outputs/GeneratedGrid/data/grid_world.png?{Guid.NewGuid()}"; 
        }
        return Task.CompletedTask;
    }

    private async Task UploadGrid(InputFileChangeEventArgs e)
    {   
        ImportedGrid = false;
        // Get the uploaded file
        var file = e.File;
        fileName = file.Name;

        // Delete all files in the GeneratedGrid directory
        var generatedGridFiles = Directory.GetFiles("wwwroot/outputs/GeneratedGrid");
        foreach (var importedFile in generatedGridFiles)
        {
            @if(!importedFile.Contains(".gitignore"))
            {
                File.Delete(importedFile);
            }
            gridWasGenerated = false;
        }

        // Delete all files in the ImportedGrid directory
        var importedGridFiles = Directory.GetFiles("wwwroot/outputs/ImportedGrid");

        // If a grid was already imported, delete the old files
        foreach (var importedFile in importedGridFiles)
        {
            @if(!importedFile.Contains(".gitignore"))
            {
                File.Delete(importedFile);
            }
        }

        // Save the file
        var newFileName = Path.GetExtension(file.Name);

        if (fileName.Contains(".zip"))
        {
            newFileName = "Import_Data.zip";
        }

        // Put the zip folder into the ImportedGrid folder
        var outputDirectory = "./wwwroot/outputs/ImportedGrid";
        if (!Directory.Exists(outputDirectory))
        {
            Directory.CreateDirectory(outputDirectory);
        }

        // Move the uploaded file to the ImportedGrid directory
        var filePath = Path.Combine(outputDirectory, newFileName);
        await using (var fileStream = file.OpenReadStream())
        await using (var outputStream = File.Create(filePath))
        {
            await fileStream.CopyToAsync(outputStream);
        }
        // Unzip the file
        if (fileName.Contains(".zip"))
        {
            using (var archive = ZipFile.OpenRead(filePath))
            {
                foreach (var entry in archive.Entries)
                {
                    if (entry.FullName.EndsWith(".png", StringComparison.OrdinalIgnoreCase) ||
                        entry.FullName.EndsWith(".json", StringComparison.OrdinalIgnoreCase) ||
                        entry.FullName.EndsWith(".csv", StringComparison.OrdinalIgnoreCase) ||
                        entry.FullName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                    {
                        // Rename file
                        var extractedFileName = entry.FullName;
                        if (entry.FullName.Contains(".png"))
                        {
                            extractedFileName = "grid_world.png";
                        }
                        else if (entry.FullName.Contains(".json"))
                        {
                            extractedFileName = "grid_world_params.json";
                        }
                        else if (entry.FullName.Contains(".csv"))
                        {
                            extractedFileName = "grid_world.csv";
                        }
                        else if (entry.FullName.Contains(".txt"))
                        {
                            extractedFileName = "grid_world.txt";
                        }
                        // Extract the file to the output directory with the new name
                        var destinationPath = Path.Combine(outputDirectory, extractedFileName);
                        entry.ExtractToFile(destinationPath, true); // Overwrite if it exists
                    }
                }
            }
        }

        // Delete the zip file after extraction
        if (File.Exists(filePath))
        {
            File.Delete(filePath);
        }
        
        imageSource = $"outputs/ImportedGrid/grid_world.png?{Guid.NewGuid()}";
        ImportedGrid = true;
    }

    private async Task ExecuteAlgorithm()
    {
        isRunning = true; // Set running state to true
        try
        {
            await runPythonScript(); // Run the algorithm
        }
        finally
        {
            isRunning = false; // Reset running state
        }
    }

    private async Task runPythonScript()
    {
        // create results folder if it doesn't exist already
        if (algorithm == "backend.load_world")
        {
            if (!Directory.Exists("./wwwroot/outputs/GridResults/ASTAR_Results"))
            {
                Directory.CreateDirectory("./wwwroot/outputs/GridResults/ASTAR_Results");
            }
        }
        else if (algorithm == "algorithms.d_search")
        {
            if (!Directory.Exists("./wwwroot/outputs/GridResults/Dijkstra_Results"))
            {
                Directory.CreateDirectory("./wwwroot/outputs/GridResults/Dijkstra_Results");
            }
        }

        var psi = new ProcessStartInfo
        {
            FileName = "python",
            Arguments = $"-m AirToGroundSearch.src.{algorithm}",
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true,
            WorkingDirectory = "/workspaces/Team-I-Air-To-Ground-Search"
        };

        using (var process = Process.Start(psi))
        {
            if (process != null)
            {
                await process.WaitForExitAsync();

                using (var reader = process.StandardOutput)
                {
                    string result = await reader.ReadToEndAsync();
                    string outputFilePath = algorithm == "backend.load_world"
                        ? "./wwwroot/outputs/GridResults/results_a.txt"
                        : "./wwwroot/outputs/GridResults/results_d.txt";
                    File.WriteAllText(outputFilePath, result);
                }

                // Move all generated files into the correct folder
                var generatedFiles = Directory.GetFiles("./wwwroot/outputs/GridResults", "*.*", SearchOption.TopDirectoryOnly);
                foreach (var file in generatedFiles)
                {
                    var fileName = Path.GetFileName(file);
                    if (fileName.Contains(".png") || fileName.Contains(".txt") || fileName.Contains(".csv"))
                    {
                        if (algorithm == "backend.load_world")
                        {
                            if(File.Exists($"./wwwroot/outputs/GridResults/ASTAR_Results/{fileName}"))
                            {
                                File.Delete($"./wwwroot/outputs/GridResults/ASTAR_Results/{fileName}");
                            }
                            File.Move(file, $"./wwwroot/outputs/GridResults/ASTAR_Results/{fileName}");

                        }
                        else if (algorithm == "algorithms.d_search")
                        {
                            if(File.Exists($"./wwwroot/outputs/GridResults/Dijkstra_Results/{fileName}"))
                            {
                                File.Delete($"./wwwroot/outputs/GridResults/Dijkstra_Results/{fileName}");
                            }
                            File.Move(file, $"./wwwroot/outputs/GridResults/Dijkstra_Results/{fileName}");
                        }
                    }
                }

                //Zip the results folder
                var zipFilePath = algorithm == "backend.load_world"
                    ? "./wwwroot/outputs/GridResults/ASTAR_Results.zip"
                    : "./wwwroot/outputs/GridResults/Dijkstra_Results.zip";
                var resultsFolderPath = algorithm == "backend.load_world"
                    ? "./wwwroot/outputs/GridResults/ASTAR_Results"
                    : "./wwwroot/outputs/GridResults/Dijkstra_Results";
                if (File.Exists(zipFilePath))
                {
                    File.Delete(zipFilePath);
                }
                ZipFile.CreateFromDirectory(resultsFolderPath, zipFilePath);
                var timestamp = DateTime.Now.Ticks;
                // Navigate to the results page with a cache buster
                NavigationManager.NavigateTo($"/GridResults?cacheBust={timestamp}");
            }
        }
    }

    private async Task deleteImportedGrid()
    {
        // Delete all files in the ImportedGrid directory
        var importedGridFiles = Directory.GetFiles("wwwroot/outputs/ImportedGrid");
        foreach (var file in importedGridFiles)
        {
            @if(!file.Contains(".gitignore"))
            {
                File.Delete(file);
            }
        }

        if (File.Exists("./wwwroot/outputs/GeneratedGrid/data/grid_world.png"))
        {
            gridWasGenerated = true;
            imageSource = $"outputs/GeneratedGrid/data/grid_world.png?{Guid.NewGuid()}";
        }

        // Reset states
        imageSource = null;
        ImportedGrid = false;

        // Trigger re-render to reset file inputs
        clearFileInputs = true;
        await Task.Delay(10); // Ensure the render cycle completes
        clearFileInputs = false;
        ImportedGrid = false;

        if(gridWasGenerated)
        {
            imageSource = $"outputs/GeneratedGrid/data/grid_world.png?{Guid.NewGuid()}";
        }
    }

}