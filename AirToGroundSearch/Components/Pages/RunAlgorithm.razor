@page "/RunAlgorithm"
@using System.Diagnostics
@rendermode InteractiveServer

<PageTitle>Air-to-Ground Pathing Algorithm Runner</PageTitle>

<h1>Air-to-Ground Pathing Algorithm Runner</h1>
<p>
    This page runs the pathing algorithm for the air-to-ground search problem. NOTE: Importing a grid deletes any previously generated grid.
</p>

@if (ImportedGrid is false && !gridWasGenerated)
{
    <h6>Either generate a grid using the generator tool or upload a grid to run the pathing algorithm on.</h6>
    <p></p>
}

<div class="row">
    @* Left Column *@
    <div class="col-md-6">
        @if(gridWasGenerated || ImportedGrid)
        {
            <div class="d-flex justify-content-between align-items-center">
                <h3>Current Grid</h3>
            </div>
            <p>
                <img src="@imageSource" alt="Grid World" />
            </p>
            <button class="btn btn-primary" @onclick="deleteImportedGrid">Clear Grid</button>
        }
    </div>

    @* Right Column *@
    <div class="col-md-6">
        <h4>Import a new grid?</h4>
        <p>Upload a new Grid to run the pathing algorithm on.</p>
        @if (!clearFileInputs)
        {
            <div class="row">
                <div class="col-md-6 form-group">
                    <p>Upload CSV:</p>
                    <InputFile OnChange="UploadGrid" accept=".csv" />
                    <p></p>
                </div>
                <div class="col-md-6 form-group">
                    <p>Upload JSON:</p>
                    <InputFile OnChange="UploadGrid" accept=".json" />
                    <p></p>
                </div>
                <div class="col-md-6 form-group">
                    <p>Upload PNG:</p>
                    <InputFile OnChange="UploadGrid" accept=".png" />
                    <p></p>
                </div>
                <div class="col-md-6 form-group">
                    <p>Upload TXT:</p>
                    <InputFile OnChange="UploadGrid" accept=".txt" />
                    <p></p>
                </div>
            </div>
        }

        @if (ImportedGrid)
        {
            <p>Grid imported successfully!</p>
        }

        @if(gridWasGenerated || ImportedGrid)
        {
            <label for="algorithm">Select an algorithm:</label>
            <p></p>

            <div class="row" style="max-width: 800px;">
                <div class="col-md-4 form-group">
                    <select class="form-control" id="algorithm" @bind="algorithm">
                        <option value="a_star">A*</option>
                        <option value="d_search">Dijkstra</option>
                    </select>
                </div>
                <div class="col-md-3 form-group">
                    <button class="btn btn-primary" @onclick="ExecuteAlgorithm" disabled="@isRunning">Run Algorithm</button>
                </div>
            </div>
            @if (isRunning)
            {
                <p>Running...</p>
            }
        }
    </div>
</div>

@inject NavigationManager NavigationManager

@code {
    private List<string> gridResultLines = new List<string>();
    private bool clearFileInputs = false;
    private string? algorithm = "a_star";
    private bool importedPNG = false;
    private bool importedJSON = false;
    private bool importedCSV = false;
    private bool importedTXT = false;
    private bool ImportedGrid = false;
    private string fileName = "";
    private bool gridWasGenerated = File.Exists("./wwwroot/outputs/GeneratedGrid/grid_world.png");
    private string? imageSource;
    private bool isRunning = false;

    protected override Task OnInitializedAsync()
    {
        if (File.Exists("./wwwroot/outputs/GeneratedGrid/grid_world.png"))
        {
            imageSource = $"outputs/GeneratedGrid/grid_world.png?{Guid.NewGuid()}"; 
        }
        var importedGridFiles = Directory.GetFiles("./wwwroot/outputs/ImportedGrid", "*.png");
        if (importedGridFiles.Any())
        {
            var fileName = Path.GetFileName(importedGridFiles.First());
            imageSource = $"outputs/ImportedGrid/{fileName}?{Guid.NewGuid()}";
            ImportedGrid = true;
        }
        return Task.CompletedTask;
    }

    private async Task UploadGrid(InputFileChangeEventArgs e)
    {   
        ImportedGrid = false;
        // Get the uploaded file
        var file = e.File;
        fileName = file.Name;
        // Delete all files in the GeneratedGrid directory
        var generatedGridFiles = Directory.GetFiles("wwwroot/outputs/GeneratedGrid");
        foreach (var importedFile in generatedGridFiles)
        {
            @if(!importedFile.Contains(".gitignore"))
            {
                File.Delete(importedFile);
            }
            gridWasGenerated = false;
        }
        // Delete all files in the ImportedGrid directory
        var importedGridFiles = Directory.GetFiles("wwwroot/outputs/ImportedGrid");
        if(!importedPNG && !importedJSON && !importedCSV && !importedTXT && !ImportedGrid)
        {
            foreach (var importedFile in importedGridFiles)
            {
                @if(!importedFile.Contains(".gitignore"))
                {
                    File.Delete(importedFile);
                }
            }
        }
        else
        {
            foreach (var importedFile in importedGridFiles)
            {
                if (importedFile.Contains(".png") && fileName.Contains(".png"))
                {
                    File.Delete(importedFile);
                }
                if (importedFile.Contains(".json") && fileName.Contains(".json"))
                {
                    File.Delete(importedFile);
                }
                if (importedFile.Contains(".csv") && fileName.Contains(".csv"))
                {
                    File.Delete(importedFile);
                }
                if (importedFile.Contains(".txt") && fileName.Contains(".txt"))
                {
                    File.Delete(importedFile);
                }
            }
        }
        // Save the file
        var newFileName = Path.GetExtension(file.Name);
        if (fileName.Contains(".png"))
        {
            newFileName = "grid_world.png";
        }
        else if (fileName.Contains(".json"))
        {
            newFileName = "grid_world_params.json";
        }
        else if (fileName.Contains(".csv"))
        {
            newFileName = "grid_world.csv";
        }
        else if (fileName.Contains(".txt"))
        {
            newFileName = "grid_world.txt";
        }
        var filePath = $"./wwwroot/outputs/ImportedGrid/{newFileName}";
        await using (var fileStream = file.OpenReadStream())
        await using (var outputStream = File.Create(filePath))
        {
            await fileStream.CopyToAsync(outputStream);
        }
        if (fileName.Contains(".png"))
        {
            importedPNG = true;
            imageSource = $"outputs/ImportedGrid/{newFileName}?{Guid.NewGuid()}";
        }
        if (fileName.Contains(".json"))
        {
            importedJSON = true;
        }
        if (fileName.Contains(".csv"))
        {
            importedCSV = true;
        }
        if (fileName.Contains(".txt"))
        {
            importedTXT = true;
        }
        if (importedPNG && importedJSON && importedCSV && importedTXT)
        {
            ImportedGrid = true;
            importedPNG = false;
            importedJSON = false;
            importedCSV = false;
            importedTXT = false;
        }
    }

    private async Task ExecuteAlgorithm()
    {
        isRunning = true; // Set running state to true
        try
        {
            await runPythonScript(); // Run the algorithm
        }
        finally
        {
            isRunning = false; // Reset running state
        }
    }

    private async Task runPythonScript()
    {
        var psi = new ProcessStartInfo
        {
            FileName = "python",
            Arguments = $"-m AirToGroundSearch.src.algorithms.{algorithm}",
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true,
            WorkingDirectory = "/workspaces/Team-I-Air-To-Ground-Search"
        };

        using (var process = Process.Start(psi))
        {
            if (process != null)
            {
                await process.WaitForExitAsync();

                using (var reader = process.StandardOutput)
                {
                    string result = await reader.ReadToEndAsync();
                    string outputFilePath = algorithm == "a_star"
                        ? "./wwwroot/outputs/GridResults/results_a.txt"
                        : "./wwwroot/outputs/GridResults/results_d.txt";
                    File.WriteAllText(outputFilePath, result);
                }

                var timestamp = DateTime.Now.Ticks;
                NavigationManager.NavigateTo($"/GridResults?cacheBust={timestamp}");
            }
        }
    }

    private async Task deleteImportedGrid()
    {
        // Delete all files in the ImportedGrid directory
        var importedGridFiles = Directory.GetFiles("wwwroot/outputs/ImportedGrid");
        foreach (var file in importedGridFiles)
        {
            @if(!file.Contains(".gitignore"))
            {
                File.Delete(file);
            }
        }

        // Reset states
        imageSource = null;
        ImportedGrid = false;
        importedPNG = false;
        importedJSON = false;
        importedCSV = false;
        importedTXT = false;

        // Trigger re-render to reset file inputs
        clearFileInputs = true;
        await Task.Delay(10); // Ensure the render cycle completes
        clearFileInputs = false;
        ImportedGrid = false;

        if(gridWasGenerated)
        {
            imageSource = $"outputs/GeneratedGrid/grid_world.png?{Guid.NewGuid()}";
        }
    }

}