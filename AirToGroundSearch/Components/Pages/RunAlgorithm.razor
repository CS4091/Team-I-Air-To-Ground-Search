@page "/RunAlgorithm"
@using System.Diagnostics
@rendermode InteractiveServer

<PageTitle>Air-to-Ground Grid Generator</PageTitle>

<h1>Air-to-Ground Pathing Algorithm Runner</h1>
<p>
    This page runs the pathing algorithm for the air-to-ground search problem.
</p>

@if (ImportedGrid is false && !gridWasGenerated)
{
    <h6>Either generate a grid using the generator tool or upload a grid to run the pathing algorithm on.</h6>
    <p></p>
}


@if(gridWasGenerated || ImportedGrid)
{
    <div class="col-md-6">
        <div class="d-flex justify-content-between align-items-center">
            <h3>Current Grid</h3>
            <button class="btn btn-primary" @onclick="deleteImportedGrid">Clear Grid</button>
        </div>
        <p>
            <img src="@imageSource" alt="Grid World" />
        </p>
    </div>
}

<div class="col-md-6">
    <h4>Import a new grid?</h4>
    <p>Upload a new Grid to run the pathing algorithm on.</p>
    @if (!clearFileInputs)
    {
        <div class="row">
            <div class="col-md-6 form-group">
                <p>Upload CSV:</p>
                <InputFile OnChange="UploadGrid" accept=".csv" />
                <p></p>
            </div>
            <div class="col-md-6 form-group">
                <p>Upload JSON:</p>
                <InputFile OnChange="UploadGrid" accept=".json" />
                <p></p>
            </div>
            <div class="col-md-6 form-group">
                <p>Upload PNG:</p>
                <InputFile OnChange="UploadGrid" accept=".png" />
                <p></p>
            </div>
            <div class="col-md-6 form-group">
                <p>Upload TXT:</p>
                <InputFile OnChange="UploadGrid" accept=".txt" />
                <p></p>
            </div>
        </div>
    }
</div>


@if (ImportedGrid)
{
    <p>Grid imported successfully!</p>
}

@if(gridWasGenerated||ImportedGrid)
{
    <label for="algorithm">Select an algorithm:</label>
    <p></p>

    <div class="row" style="max-width: 800px;">
        <div class="col-md-4 form-group">
            <select class="form-control" id="algorithm" @bind="algorithm">
                <option value="a_star">A*</option>
                <option value="dijkstra">Dijkstra</option>
            </select>
        </div>
        <div class="col-md-3 form-group">
            <button class="btn btn-primary" @onclick="runPythonScript">Run Algorithm</button>
        </div>
    </div>

    <p></p>
    <p role="status">Output:</p>
    @if (gridResultLines != null)
    {
        <ul>
            @foreach (var line in gridResultLines)
            {
                <li>@line</li>
            }
        </ul>
    }
}

@code {
    private List<string> gridResultLines = new List<string>();
    private bool clearFileInputs = false;
    private string? algorithm = "a_star";
    private bool importedPNG = false;
    private bool importedJSON = false;
    private bool importedCSV = false;
    private bool importedTXT = false;
    private bool ImportedGrid = File.Exists("./wwwroot/outputs/ImportedGrid/grid_world.png");
    private string fileName = "";
    private bool gridWasGenerated = File.Exists("./wwwroot/outputs/GeneratedGrid/grid_world.png");
    private string? imageSource = $"outputs/GeneratedGrid/grid_world.png?{Guid.NewGuid()}";

    private async Task UploadGrid(InputFileChangeEventArgs e)
    {
        // Get the uploaded file
        var file = e.File;
        fileName = file.Name;
        // Save the file
        var filePath = $"./wwwroot/outputs/ImportedGrid/{fileName}";
        await using (var fileStream = file.OpenReadStream())
        await using (var outputStream = File.Create(filePath))
        {
            await fileStream.CopyToAsync(outputStream);
        }
        if (fileName.Contains(".png"))
        {
            importedPNG = true;
            imageSource = $"outputs/ImportedGrid/grid_world.png?{Guid.NewGuid()}";
        }
        if (fileName.Contains(".json"))
        {
            importedJSON = true;
        }
        if (fileName.Contains(".csv"))
        {
            importedCSV = true;
        }
        if (fileName.Contains(".txt"))
        {
            importedTXT = true;
        }
        if (importedPNG && importedJSON && importedCSV && importedTXT)
        {
            ImportedGrid = true;
        }
    }

    private void runPythonScript()
    {
        // Create a new process
        var psi = new ProcessStartInfo
        {
            FileName = "python",
            Arguments = $"src/algorithms/{algorithm}.py",
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        // Start the process
        using (var process = Process.Start(psi))
        {
            if (process != null)
            {
                // Read the output
                using (var reader = process.StandardOutput)
                {
                    string result = reader.ReadToEnd();
                    gridResultLines = result.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).ToList();
                }
            }
        }
    }

    private async Task deleteImportedGrid()
    {
        // Delete imported grid files
        File.Delete("wwwroot/outputs/ImportedGrid/grid_world.png");
        File.Delete("wwwroot/outputs/ImportedGrid/grid_world.csv");
        File.Delete("wwwroot/outputs/ImportedGrid/grid_world_params.json");
        File.Delete("wwwroot/outputs/ImportedGrid/grid_world.txt");

        // Reset states
        imageSource = null;
        ImportedGrid = false;
        importedPNG = false;
        importedJSON = false;
        importedCSV = false;
        importedTXT = false;

        if (gridWasGenerated)
        {
            File.Delete("wwwroot/outputs/GeneratedGrid/grid_world.png");
            File.Delete("wwwroot/outputs/GeneratedGrid/grid_world.csv");
            File.Delete("wwwroot/outputs/GeneratedGrid/grid_world_params.json");
            File.Delete("wwwroot/outputs/GeneratedGrid/grid_world.txt");
            gridWasGenerated = false;
        }

        // Trigger re-render to reset file inputs
        clearFileInputs = true;
        await Task.Delay(10); // Ensure the render cycle completes
        clearFileInputs = false;
    }

}